name: Database Deployment Pipeline
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm deployment to all environments'
        required: true
        type: boolean
        default: false

jobs:
  # Setup and read configuration
  setup:
    runs-on: windows-latest
    outputs:
      environments: ${{ steps.read-config.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Read configuration
        id: read-config
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.confirm_deployment }}" -eq "false") {
            Write-Error "Deployment confirmation required"
            exit 1
          }
          
          # Read JSON configuration
          $config = Get-Content -Path ".github/config/database-config.json" | ConvertFrom-Json
          $allEnvironments = $config.PSObject.Properties.Name
          
          # Output environments array
          $environmentsJson = $allEnvironments | ConvertTo-Json -Compress
          echo "environments=$environmentsJson" >> $env:GITHUB_OUTPUT
          
          Write-Host "Environments found: $($allEnvironments -join ', ')"

  # DEV2 Environment Approval
  approve-dev2:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'DEV2')
    environment: DEV2-approval
    steps:
      - name: Approve DEV2 Environment
        run: echo "Approval granted for DEV2 environment"

  # DEV2 Database Deployments
  deploy-dev2-database1:
    runs-on: windows-latest
    needs: [setup, approve-dev2]
    if: needs.approve-dev2.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Database1 to DEV2
        run: |
          echo "Deploying Database1 to DEV2"
          # Add your deployment steps here
          # - uses: ./.github/actions/deploy-database
          #   with:
          #     database-name: Database1
          #     environment: DEV2
          #     connection-string: ${{ secrets.DEV2_Database1_CONNECTION_STRING }}

  # DEV2ALL Environment Approval
  approve-dev2all:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'DEV2ALL')
    environment: DEV2ALL-approval
    steps:
      - name: Approve DEV2ALL Environment
        run: echo "Approval granted for DEV2ALL environment"

  # DEV2ALL Database Deployments
  deploy-dev2all-database1:
    runs-on: windows-latest
    needs: [setup, approve-dev2all]
    if: needs.approve-dev2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Database1 to DEV2ALL
        run: |
          echo "Deploying Database1 to DEV2ALL"
          # Add your deployment steps here

  deploy-dev2all-database2:
    runs-on: windows-latest
    needs: [setup, approve-dev2all]
    if: needs.approve-dev2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Database2 to DEV2ALL
        run: |
          echo "Deploying Database2 to DEV2ALL"
          # Add your deployment steps here

  deploy-dev2all-database3:
    runs-on: windows-latest
    needs: [setup, approve-dev2all]
    if: needs.approve-dev2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy Database3 to DEV2ALL
        run: |
          echo "Deploying Database3 to DEV2ALL"
          # Add your deployment steps here

  # QA2ALL Environment Approval
  approve-qa2all:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'QA2ALL')
    environment: QA2ALL-approval
    steps:
      - name: Approve QA2ALL Environment
        run: echo "Approval granted for QA2ALL environment"

  # QA2ALL Database Deployments
  deploy-qa2all-databasea:
    runs-on: windows-latest
    needs: [setup, approve-qa2all]
    if: needs.approve-qa2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseA to QA2ALL
        run: |
          echo "Deploying DatabaseA to QA2ALL"
          # Add your deployment steps here

  deploy-qa2all-databaseb:
    runs-on: windows-latest
    needs: [setup, approve-qa2all]
    if: needs.approve-qa2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseB to QA2ALL
        run: |
          echo "Deploying DatabaseB to QA2ALL"
          # Add your deployment steps here

  deploy-qa2all-databasec:
    runs-on: windows-latest
    needs: [setup, approve-qa2all]
    if: needs.approve-qa2all.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseC to QA2ALL
        run: |
          echo "Deploying DatabaseC to QA2ALL"
          # Add your deployment steps here

  # UATEMEAALL Environment Approval
  approve-uatemeaall:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'UATEMEAALL')
    environment: UATEMEAALL-approval
    steps:
      - name: Approve UATEMEAALL Environment
        run: echo "Approval granted for UATEMEAALL environment"

  # UATEMEAALL Database Deployments
  deploy-uatemeaall-databasex:
    runs-on: windows-latest
    needs: [setup, approve-uatemeaall]
    if: needs.approve-uatemeaall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseX to UATEMEAALL
        run: |
          echo "Deploying DatabaseX to UATEMEAALL"
          # Add your deployment steps here

  deploy-uatemeaall-databasey:
    runs-on: windows-latest
    needs: [setup, approve-uatemeaall]
    if: needs.approve-uatemeaall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseY to UATEMEAALL
        run: |
          echo "Deploying DatabaseY to UATEMEAALL"
          # Add your deployment steps here

  # UATNASAALL Environment Approval
  approve-uatnasaall:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'UATNASAALL')
    environment: UATNASAALL-approval
    steps:
      - name: Approve UATNASAALL Environment
        run: echo "Approval granted for UATNASAALL environment"

  # UATNASAALL Database Deployments
  deploy-uatnasaall-databasep:
    runs-on: windows-latest
    needs: [setup, approve-uatnasaall]
    if: needs.approve-uatnasaall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseP to UATNASAALL
        run: |
          echo "Deploying DatabaseP to UATNASAALL"
          # Add your deployment steps here

  deploy-uatnasaall-databaseq:
    runs-on: windows-latest
    needs: [setup, approve-uatnasaall]
    if: needs.approve-uatnasaall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseQ to UATNASAALL
        run: |
          echo "Deploying DatabaseQ to UATNASAALL"
          # Add your deployment steps here

  deploy-uatnasaall-databaser:
    runs-on: windows-latest
    needs: [setup, approve-uatnasaall]
    if: needs.approve-uatnasaall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseR to UATNASAALL
        run: |
          echo "Deploying DatabaseR to UATNASAALL"
          # Add your deployment steps here

  # UATAPACALL Environment Approval
  approve-uatapacall:
    runs-on: windows-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.environments), 'UATAPACALL')
    environment: UATAPACALL-approval
    steps:
      - name: Approve UATAPACALL Environment
        run: echo "Approval granted for UATAPACALL environment"

  # UATAPACALL Database Deployments
  deploy-uatapacall-databasem:
    runs-on: windows-latest
    needs: [setup, approve-uatapacall]
    if: needs.approve-uatapacall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseM to UATAPACALL
        run: |
          echo "Deploying DatabaseM to UATAPACALL"
          # Add your deployment steps here

  deploy-uatapacall-databausen:
    runs-on: windows-latest
    needs: [setup, approve-uatapacall]
    if: needs.approve-uatapacall.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy DatabaseN to UATAPACALL
        run: |
          echo "Deploying DatabaseN to UATAPACALL"
          # Add your deployment steps here

  # Summary
  deployment-summary:
    runs-on: windows-latest
    needs: [
      setup,
      deploy-dev2-database1,
      deploy-dev2all-database1, deploy-dev2all-database2, deploy-dev2all-database3,
      deploy-qa2all-databasea, deploy-qa2all-databaseb, deploy-qa2all-databasec,
      deploy-uatemeaall-databasex, deploy-uatemeaall-databasey,
      deploy-uatnasaall-databasep, deploy-uatnasaall-databaseq, deploy-uatnasaall-databaser,
      deploy-uatapacall-databasem, deploy-uatapacall-databausen
    ]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "Deployment completed for all environments"
          echo "Check individual job results for details"
