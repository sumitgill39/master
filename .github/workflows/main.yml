name: Database Deployment Matrix - All Environments
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_all_environments:
        description: 'Deploy to all environments'
        required: false
        type: boolean
        default: true
      confirm_deployment:
        description: 'Confirm you want to deploy to ALL environments'
        required: true
        type: boolean
        default: false

jobs:
  # Read configuration and generate matrix for ALL environments
  setup-matrix:
    runs-on: windows-latest
    outputs:
      environment-matrix: ${{ steps.create-matrix.outputs.environment-matrix }}
      database-matrix: ${{ steps.create-matrix.outputs.database-matrix }}
      total-environments: ${{ steps.create-matrix.outputs.total-environments }}
      total-databases: ${{ steps.create-matrix.outputs.total-databases }}
      environment-list: ${{ steps.create-matrix.outputs.environment-list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment matrix for all environments
        id: create-matrix
        shell: powershell
        run: |
          # Validate confirmation for workflow_dispatch
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.confirm_deployment }}" -eq "false") {
            Write-Error "Deployment confirmation required. Please check 'Confirm you want to deploy to ALL environments' checkbox."
            exit 1
          }
          
          # Read JSON configuration
          $config = Get-Content -Path ".github/config/database-config.json" | ConvertFrom-Json
          $allEnvironments = $config.PSObject.Properties.Name
          
          Write-Host "Found environments: $($allEnvironments -join ', ')"
          echo "total-environments=$($allEnvironments.Count)" >> $env:GITHUB_OUTPUT
          
          # Create environment list for output
          $envListJson = $allEnvironments | ConvertTo-Json -Compress
          echo "environment-list=$envListJson" >> $env:GITHUB_OUTPUT
          
          # Create environment matrix (for approvals)
          $environmentMatrix = @()
          foreach ($env in $allEnvironments) {
            $environmentMatrix += @{
              environment = $env
              database_count = $config.$env.Database.Count
            }
          }
          $envMatrixJson = @{include = $environmentMatrix} | ConvertTo-Json -Compress
          echo "environment-matrix=$envMatrixJson" >> $env:GITHUB_OUTPUT
          
          # Create database matrix (for deployments) - ALL environments and databases
          $databaseMatrix = @()
          $totalDatabases = 0
          
          foreach ($env in $allEnvironments) {
            $databases = $config.$env.Database
            $totalDatabases += $databases.Count
            
            foreach ($db in $databases) {
              $databaseMatrix += @{
                environment = $env
                database = $db
                stage = "$env-$db"
                approval_env = "$env-approval"
              }
            }
          }
          
          echo "total-databases=$totalDatabases" >> $env:GITHUB_OUTPUT
          $dbMatrixJson = @{include = $databaseMatrix} | ConvertTo-Json -Compress
          echo "database-matrix=$dbMatrixJson" >> $env:GITHUB_OUTPUT
          
          Write-Host "Generated environment matrix for $($allEnvironments.Count) environments"
          Write-Host "Generated database matrix for $totalDatabases total databases"
          
          # Display deployment plan
          echo "## 🚀 Complete Deployment Plan" >> $env:GITHUB_STEP_SUMMARY
          echo "**Total Environments:** $($allEnvironments.Count)" >> $env:GITHUB_STEP_SUMMARY
          echo "**Total Databases:** $totalDatabases" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### 📋 Environment Breakdown:" >> $env:GITHUB_STEP_SUMMARY
          
          foreach ($env in $allEnvironments) {
            $dbCount = $config.$env.Database.Count
            $dbList = $config.$env.Database -join ", "
            echo "- **$env**: $dbCount database(s) → $dbList" >> $env:GITHUB_STEP_SUMMARY
          }

  # Environment-level approvals (parallel approvals for all environments)
  approve-all-environments:
    runs-on: windows-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.environment-matrix) }}
      fail-fast: false
      max-parallel: 10  # Allow multiple environment approvals simultaneously
    environment: 
      name: ${{ matrix.environment }}-approval
    steps:
      - name: Request Approval for ${{ matrix.environment }}
        shell: powershell
        run: |
          $environment = "${{ matrix.environment }}"
          $dbCount = "${{ matrix.database_count }}"
          
          Write-Host "🔐 Requesting approval for environment: $environment"
          Write-Host "📊 Databases in this environment: $dbCount"
          
          echo "## 🌍 Environment: $environment" >> $env:GITHUB_STEP_SUMMARY
          echo "**Database Count:** $dbCount" >> $env:GITHUB_STEP_SUMMARY
          echo "**Approval Environment:** \`$environment-approval\`" >> $env:GITHUB_STEP_SUMMARY
          echo "**Status:** Awaiting approval for deployment" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### ℹ️ What happens after approval:" >> $env:GITHUB_STEP_SUMMARY
          echo "- All $dbCount database(s) in $environment will be deployed" >> $env:GITHUB_STEP_SUMMARY
          echo "- Each database will be deployed as a separate stage" >> $env:GITHUB_STEP_SUMMARY
          echo "- Deployment will include pre/post validation steps" >> $env:GITHUB_STEP_SUMMARY
          
          # Show this is part of a larger deployment
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "🔗 **Part of multi-environment deployment**" >> $env:GITHUB_STEP_SUMMARY
          echo "- Total environments: ${{ needs.setup-matrix.outputs.total-environments }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- Total databases across all environments: ${{ needs.setup-matrix.outputs.total-databases }}" >> $env:GITHUB_STEP_SUMMARY

  # Database deployment stages (all environments, all databases)
  deploy-all-database-stages:
    needs: [setup-matrix, approve-all-environments]
    runs-on: windows-latest
    if: always() && needs.setup-matrix.result == 'success' && needs.approve-all-environments.result == 'success'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.database-matrix) }}
      fail-fast: false
      max-parallel: 5  # Control concurrent database deployments
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Stage Setup - ${{ matrix.stage }}
        shell: powershell
        run: |
          Write-Host "============================================"
          Write-Host "🎯 STAGE: ${{ matrix.stage }}"
          Write-Host "🌍 Environment: ${{ matrix.environment }}"
          Write-Host "💾 Database: ${{ matrix.database }}"
          Write-Host "🔐 Approval Env: ${{ matrix.approval_env }}"
          Write-Host "============================================"
          
          echo "## 🎭 Stage: ${{ matrix.stage }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Database:** ${{ matrix.database }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Approval Environment:** ${{ matrix.approval_env }}" >> $env:GITHUB_STEP_SUMMARY
      
      - name: 🔍 Pre-deployment Validation
        shell: powershell
        run: |
          Write-Host "Running pre-deployment validation for ${{ matrix.database }} in ${{ matrix.environment }}"
          
          # Validate DACPAC exists
          $dacpacPath = "./artifacts/${{ matrix.database }}.dacpac"
          if (-not (Test-Path $dacpacPath)) {
            Write-Warning "DACPAC not found at: $dacpacPath"
            # Create a dummy file for demo purposes - remove in production
            New-Item -Path $dacpacPath -ItemType File -Force | Out-Null
            Write-Host "⚠️ Created dummy DACPAC for demo purposes"
          } else {
            Write-Host "✅ DACPAC found at: $dacpacPath"
          }
          
          # Validate connection string secret exists
          $secretName = "${{ matrix.environment }}_${{ matrix.database }}_CONNECTION_STRING"
          Write-Host "Expected secret name: $secretName"
          
          # Environment-specific validation
          switch ("${{ matrix.environment }}") {
            "DEV2" { 
              Write-Host "🔧 DEV2 environment - relaxed validation"
            }
            { $_ -like "*ALL" } {
              Write-Host "🔒 Production-like environment - strict validation"
            }
            default {
              Write-Host "🔍 Standard validation for ${{ matrix.environment }}"
            }
          }
          
          Write-Host "✅ Pre-deployment validation completed"
      
      - name: 🗄️ Database Backup
        if: matrix.environment != 'DEV2'  # Skip backup for DEV2
        shell: powershell
        run: |
          Write-Host "Creating backup for ${{ matrix.database }} in ${{ matrix.environment }}"
          
          # Simulate backup process
          Start-Sleep -Seconds 2
          Write-Host "✅ Backup completed for ${{ matrix.database }}"
      
      - name: 🚀 Deploy Database - ${{ matrix.database }}
        shell: powershell
        run: |
          Write-Host "Deploying ${{ matrix.database }} to ${{ matrix.environment }}"
          
          # Simulate deployment (replace with actual deployment action)
          Write-Host "📦 Deploying DACPAC: ./artifacts/${{ matrix.database }}.dacpac"
          Write-Host "🔗 Connection: ${{ matrix.environment }}_${{ matrix.database }}_CONNECTION_STRING"
          Write-Host "⏱️ Timeout: 300 seconds"
          
          # Simulate deployment time
          Start-Sleep -Seconds 3
          Write-Host "✅ Database deployment completed successfully"
          
          # Uncomment and modify this section to use your actual deployment action:
          # - name: 🚀 Deploy Database - ${{ matrix.database }}
          #   uses: ./.github/actions/dacpac-deployment
          #   with:
          #     database-name: ${{ matrix.database }}
          #     environment: ${{ matrix.environment }}
          #     connection-string: ${{ secrets[format('{0}_{1}_CONNECTION_STRING', matrix.environment, matrix.database)] }}
          #     dacpac-path: './artifacts/${{ matrix.database }}.dacpac'
          #     sql-timeout: '300'
          #     backup-before-deploy: 'true'
          #   env:
          #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 🧪 Post-deployment Testing
        shell: powershell
        run: |
          Write-Host "Running post-deployment tests for ${{ matrix.database }} in ${{ matrix.environment }}"
          
          # Environment-specific testing
          switch ("${{ matrix.environment }}") {
            "DEV2" { 
              Write-Host "🔧 Running basic smoke tests for DEV2"
            }
            { $_ -like "*QA*" } {
              Write-Host "🧪 Running comprehensive QA tests"
            }
            { $_ -like "*UAT*" } {
              Write-Host "👥 Running user acceptance tests"
            }
            default {
              Write-Host "🔍 Running standard post-deployment tests"
            }
          }
          
          # Simulate testing
          Start-Sleep -Seconds 2
          Write-Host "✅ Post-deployment testing completed for ${{ matrix.database }}"
      
      - name: 📊 Stage Summary
        if: always()
        shell: powershell
        run: |
          $status = if ("${{ job.status }}" -eq "success") { "✅ SUCCESS" } else { "❌ FAILED" }
          Write-Host "Stage ${{ matrix.stage }} - Status: $status"
          
          echo "### 🎯 Stage Result: ${{ matrix.stage }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Status:** $status" >> $env:GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Database:** ${{ matrix.database }}" >> $env:GITHUB_STEP_SUMMARY
          echo "**Completed:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY

  # Final comprehensive summary
  deployment-summary:
    needs: [setup-matrix, approve-all-environments, deploy-all-database-stages]
    runs-on: windows-latest
    if: always()
    steps:
      - name: 📋 Complete Deployment Summary
        shell: powershell
        run: |
          $totalEnvs = "${{ needs.setup-matrix.outputs.total-environments }}"
          $totalDbs = "${{ needs.setup-matrix.outputs.total-databases }}"
          $approvalStatus = "${{ needs.approve-all-environments.result }}"
          $deploymentStatus = "${{ needs.deploy-all-database-stages.result }}"
          
          echo "# 🚀 Complete Multi-Environment Deployment Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "## 📊 Overall Statistics" >> $env:GITHUB_STEP_SUMMARY
          echo "**Total Environments:** $totalEnvs" >> $env:GITHUB_STEP_SUMMARY
          echo "**Total Databases:** $totalDbs" >> $env:GITHUB_STEP_SUMMARY
          echo "**Approval Status:** $(if ($approvalStatus -eq 'success') { '✅ All Approved' } else { '❌ ' + $approvalStatus })" >> $env:GITHUB_STEP_SUMMARY
          echo "**Deployment Status:** $(if ($deploymentStatus -eq 'success') { '✅ All Successful' } elseif ($deploymentStatus -eq 'failure') { '❌ Some Failed' } elseif ($deploymentStatus -eq 'skipped') { '⏭️ Skipped' } else { '⚠️ ' + $deploymentStatus })" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          
          # Show all environments processed
          $environmentList = '${{ needs.setup-matrix.outputs.environment-list }}' | ConvertFrom-Json
          echo "## 🌍 Environments Processed" >> $env:GITHUB_STEP_SUMMARY
          $environmentList | ForEach-Object {
            $statusIcon = if ($deploymentStatus -eq 'success') { '✅' } elseif ($deploymentStatus -eq 'failure') { '⚠️' } else { '❓' }
            echo "- **$_** $statusIcon" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          
          # Show deployment stages summary
          if ($deploymentStatus -ne 'skipped') {
            echo "## 🎭 Deployment Stages Summary" >> $env:GITHUB_STEP_SUMMARY
            $databaseMatrix = '${{ needs.setup-matrix.outputs.database-matrix }}' | ConvertFrom-Json
            
            # Group by environment
            $envGroups = $databaseMatrix.include | Group-Object environment
            foreach ($envGroup in $envGroups) {
              echo "### $($envGroup.Name)" >> $env:GITHUB_STEP_SUMMARY
              $envGroup.Group | ForEach-Object {
                $statusIcon = if ($deploymentStatus -eq 'success') { '✅' } elseif ($deploymentStatus -eq 'failure') { '⚠️' } else { '❓' }
                echo "- **$($_.stage)** $statusIcon" >> $env:GITHUB_STEP_SUMMARY
              }
              echo "" >> $env:GITHUB_STEP_SUMMARY
            }
          }
          
          echo "## 📈 Summary" >> $env:GITHUB_STEP_SUMMARY
          if ($deploymentStatus -eq 'success') {
            echo "🎉 **All environments and databases deployed successfully!**" >> $env:GITHUB_STEP_SUMMARY
            echo "- ✅ All $totalEnvs environments processed" >> $env:GITHUB_STEP_SUMMARY
            echo "- ✅ All $totalDbs databases deployed" >> $env:GITHUB_STEP_SUMMARY
            echo "- 🔍 Review individual stage logs for details" >> $env:GITHUB_STEP_SUMMARY
          } elseif ($deploymentStatus -eq 'failure') {
            echo "⚠️ **Some deployments encountered issues**" >> $env:GITHUB_STEP_SUMMARY
            echo "- 📋 Check individual stage logs for failed deployments" >> $env:GITHUB_STEP_SUMMARY
            echo "- 🔧 Fix issues and re-run workflow" >> $env:GITHUB_STEP_SUMMARY
            echo "- 📞 Contact DevOps team if assistance needed" >> $env:GITHUB_STEP_SUMMARY
          } elseif ($deploymentStatus -eq 'skipped') {
            echo "⏭️ **Deployment was skipped**" >> $env:GITHUB_STEP_SUMMARY
            echo "- 🔐 Likely due to approval rejection in one or more environments" >> $env:GITHUB_STEP_SUMMARY
            echo "- 🔄 Re-run workflow after addressing approval requirements" >> $env:GITHUB_STEP_SUMMARY
          }

  # Show complete configuration
  show-complete-configuration:
    runs-on: windows-latest
    needs: setup-matrix
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 📋 Complete Environment Configuration
        shell: powershell
        run: |
          echo "# 📋 Complete Environment Configuration" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "## 🎯 All Environments and Required Setup" >> $env:GITHUB_STEP_SUMMARY
          
          $environmentList = '${{ needs.setup-matrix.outputs.environment-list }}' | ConvertFrom-Json
          $environmentList | ForEach-Object {
            echo "### $_" >> $env:GITHUB_STEP_SUMMARY
            echo "- **Approval Environment:** \`$_-approval\`" >> $env:GITHUB_STEP_SUMMARY
            echo "- **Required Secrets Pattern:** \`$($_)_[DATABASE]_CONNECTION_STRING\`" >> $env:GITHUB_STEP_SUMMARY
            echo "- **Deployment:** Each database as separate stage" >> $env:GITHUB_STEP_SUMMARY
            echo "- **Backup:** $(if ($_ -eq 'DEV2') { 'Disabled' } else { 'Enabled' })" >> $env:GITHUB_STEP_SUMMARY
            echo "" >> $env:GITHUB_STEP_SUMMARY
          }
          
          echo "## 🔧 Required GitHub Setup" >> $env:GITHUB_STEP_SUMMARY
          echo "### Environments to create:" >> $env:GITHUB_STEP_SUMMARY
          $environmentList | ForEach-Object {
            echo "- \`$_-approval\` (with required reviewers)" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Secrets needed:" >> $env:GITHUB_STEP_SUMMARY
          echo "- \`AZURE_CREDENTIALS\`" >> $env:GITHUB_STEP_SUMMARY
          echo "- Connection strings for each environment-database combination" >> $env:GITHUB_STEP_SUMMARY
