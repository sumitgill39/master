name: Database Deployment Pipeline
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm deployment to all environments'
        required: true
        type: boolean
        default: false

jobs:
  # Setup and read configuration
  setup:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
      environments: ${{ steps.create-matrix.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment matrix
        id: create-matrix
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.confirm_deployment }}" -eq "false") {
            Write-Error "Deployment confirmation required"
            exit 1
          }
          
          # Read JSON configuration
          $config = Get-Content -Path ".github/config/database-config.json" | ConvertFrom-Json
          $allEnvironments = $config.PSObject.Properties.Name
          
          # Create matrix for environment deployments
          $matrixArray = @()
          foreach ($env in $allEnvironments) {
            $databases = $config.$env.Database
            $matrixArray += @{
              environment = $env
              databases = $databases
            }
          }
          
          $matrixJson = @{include = $matrixArray} | ConvertTo-Json -Compress
          echo "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
          
          # Output environments array for approvals
          $environmentsJson = $allEnvironments | ConvertTo-Json -Compress
          echo "environments=$environmentsJson" >> $env:GITHUB_OUTPUT
          
          Write-Host "Environments found: $($allEnvironments -join ', ')"
          
          # Display structure
          foreach ($env in $allEnvironments) {
            $dbCount = $config.$env.Database.Count
            Write-Host "$env ($dbCount databases)"
            foreach ($db in $config.$env.Database) {
              Write-Host "  -> $db"
            }
          }

  # Environment approvals - one per environment
  approve-environments:
    runs-on: windows-latest
    needs: setup
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
      fail-fast: false
    environment: 
      name: ${{ matrix.environment }}-approval
    steps:
      - name: Approve ${{ matrix.environment }}
        run: echo "Approval granted for ${{ matrix.environment }} environment"

  # Database deployments - grouped by environment
  deploy-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: needs.approve-environments.result == 'success'
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Environment Setup - ${{ matrix.environment }}
        run: |
          echo "Setting up deployment for environment: ${{ matrix.environment }}"
          echo "Databases to deploy: ${{ join(matrix.databases, ', ') }}"
      
      - name: Deploy All Databases to ${{ matrix.environment }}
        shell: powershell
        run: |
          $environment = "${{ matrix.environment }}"
          $databases = @(${{ toJson(matrix.databases) }})
          
          Write-Host "============================================"
          Write-Host "ENVIRONMENT: $environment"
          Write-Host "============================================"
          
          foreach ($database in $databases) {
            Write-Host ""
            Write-Host "  -> DATABASE: $database"
            Write-Host "     -> Step 1: Pre-deployment validation"
            # Add your pre-deployment steps here
            
            Write-Host "     -> Step 2: Database backup (if required)"
            # Add your backup steps here
            
            Write-Host "     -> Step 3: Deploy database"
            # Add your main deployment steps here
            # Example:
            # - uses: ./.github/actions/deploy-database
            #   with:
            #     database-name: $database
            #     environment: $environment
            #     connection-string: "Use secrets with static names or pass as env vars"
            
            Write-Host "     -> Step 4: Post-deployment validation"
            # Add your post-deployment steps here
            
            Write-Host "     -> Step 5: Database deployment completed"
            Write-Host ""
          }
          
          Write-Host "All databases deployed successfully for $environment"

  # Summary
  deployment-summary:
    runs-on: windows-latest
    needs: [setup, deploy-databases]
    if: always()
    steps:
      - name: Deployment Summary
        shell: powershell
        run: |
          $environments = '${{ needs.setup.outputs.environments }}' | ConvertFrom-Json
          $deploymentStatus = "${{ needs.deploy-databases.result }}"
          
          Write-Host "============================================"
          Write-Host "DEPLOYMENT SUMMARY"
          Write-Host "============================================"
          Write-Host "Total Environments: $($environments.Count)"
          Write-Host "Deployment Status: $deploymentStatus"
          Write-Host ""
          
          foreach ($env in $environments) {
            Write-Host "$env : $deploymentStatus"
          }
          
          if ($deploymentStatus -eq "success") {
            Write-Host ""
            Write-Host "All environments deployed successfully!"
          } elseif ($deploymentStatus -eq "failure") {
            Write-Host ""
            Write-Host "Some deployments failed. Check individual job logs."
          }
