name: Database Deployment Pipeline
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm deployment to all environments'
        required: true
        type: boolean
        default: false

jobs:
  # Setup and read configuration to create dynamic matrix
  setup:
    runs-on: windows-latest
    outputs:
      environments: ${{ steps.create-matrix.outputs.environments }}
      approval-matrix: ${{ steps.create-matrix.outputs.approval-matrix }}
      database-matrix: ${{ steps.create-matrix.outputs.database-matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create dynamic matrix from JSON config
        id: create-matrix
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.confirm_deployment }}" -eq "false") {
            Write-Error "Deployment confirmation required"
            exit 1
          }
          
          # Read JSON configuration
          $config = Get-Content -Path ".github/config/database-config.json" | ConvertFrom-Json
          $allEnvironments = $config.PSObject.Properties.Name
          
          Write-Host "Reading configuration from JSON file..."
          Write-Host "Environments found: $($allEnvironments -join ', ')"
          
          # Create environments array for approval matrix
          $environmentsJson = $allEnvironments | ConvertTo-Json -Compress
          echo "environments=$environmentsJson" >> $env:GITHUB_OUTPUT
          
          # Create approval matrix
          $approvalMatrix = @()
          foreach ($env in $allEnvironments) {
            $approvalMatrix += @{
              environment = $env
            }
          }
          $approvalMatrixJson = @{include = $approvalMatrix} | ConvertTo-Json -Compress
          echo "approval-matrix=$approvalMatrixJson" >> $env:GITHUB_OUTPUT
          
          # Create database deployment matrix
          $databaseMatrix = @()
          foreach ($env in $allEnvironments) {
            $databases = $config.$env.Database
            Write-Host "$env environment has databases: $($databases -join ', ')"
            
            foreach ($db in $databases) {
              $databaseMatrix += @{
                environment = $env
                database = $db
                job_name = "deploy-$($env.ToLower())-$($db.ToLower())"
                approval_job = "approve-$($env.ToLower())"
              }
            }
          }
          $databaseMatrixJson = @{include = $databaseMatrix} | ConvertTo-Json -Compress
          echo "database-matrix=$databaseMatrixJson" >> $env:GITHUB_OUTPUT
          
          Write-Host "Matrix created successfully"
          Write-Host "Total environments: $($allEnvironments.Count)"
          Write-Host "Total databases: $($databaseMatrix.Count)"

  # Dynamic environment approvals
  approve-environments:
    runs-on: windows-latest
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.approval-matrix) }}
      fail-fast: false
    environment: 
      name: ${{ matrix.environment }}-approval
    steps:
      - name: Approve ${{ matrix.environment }} Environment
        run: |
          echo "Approval granted for ${{ matrix.environment }} environment"
          echo "This approval covers all databases in ${{ matrix.environment }}"

  # Dynamic database deployments
  deploy-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.database-matrix) }}
      fail-fast: false
      max-parallel: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Wait for environment approval
        run: |
          echo "Waiting for ${{ matrix.environment }} environment approval to complete"
          echo "Deploying ${{ matrix.database }} to ${{ matrix.environment }}"
      
      - name: Pre-deployment validation
        run: |
          echo "Running pre-deployment validation for ${{ matrix.database }}"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your pre-deployment validation steps here
      
      - name: Deploy ${{ matrix.database }} to ${{ matrix.environment }}
        run: |
          echo "Starting deployment of ${{ matrix.database }} to ${{ matrix.environment }}"
          # Add your main deployment steps here
          # Example:
          # - uses: ./.github/actions/deploy-database
          #   with:
          #     database-name: ${{ matrix.database }}
          #     environment: ${{ matrix.environment }}
          #     connection-string: ${{ secrets[format('{0}_{1}_CONNECTION_STRING', matrix.environment, matrix.database)] }}
          echo "Deployment completed successfully"
      
      - name: Post-deployment validation
        run: |
          echo "Running post-deployment validation for ${{ matrix.database }}"
          # Add your post-deployment validation steps here
      
      - name: Deployment summary for ${{ matrix.database }}
        run: |
          echo "Database: ${{ matrix.database }}"
          echo "Environment: ${{ matrix.environment }}"
          echo "Status: Success"
          echo "Timestamp: $(date)"

  # Final deployment summary
  deployment-summary:
    runs-on: windows-latest
    needs: [setup, deploy-databases]
    if: always()
    steps:
      - name: Overall Deployment Summary
        shell: powershell
        run: |
          $deploymentStatus = "${{ needs.deploy-databases.result }}"
          $environments = '${{ needs.setup.outputs.environments }}' | ConvertFrom-Json
          
          Write-Host "============================================"
          Write-Host "DEPLOYMENT SUMMARY"
          Write-Host "============================================"
          Write-Host "Total Environments: $($environments.Count)"
          Write-Host "Deployment Status: $deploymentStatus"
          Write-Host ""
          Write-Host "Environments processed:"
          foreach ($env in $environments) {
            Write-Host "- $env"
          }
          
          if ($deploymentStatus -eq "success") {
            Write-Host ""
            Write-Host "All database deployments completed successfully!"
          } elseif ($deploymentStatus -eq "failure") {
            Write-Host ""
            Write-Host "Some deployments failed. Check individual job logs for details."
          }
