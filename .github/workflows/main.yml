name: Database Deployment Pipeline
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm deployment to all environments'
        required: true
        type: boolean
        default: false

jobs:
  # Setup and read configuration to create dynamic matrix
  setup:
    runs-on: windows-latest
    outputs:
      environments: ${{ steps.create-matrix.outputs.environments }}
      approval-matrix: ${{ steps.create-matrix.outputs.approval-matrix }}
      dev2-databases: ${{ steps.create-matrix.outputs.dev2-databases }}
      dev2all-databases: ${{ steps.create-matrix.outputs.dev2all-databases }}
      qa2all-databases: ${{ steps.create-matrix.outputs.qa2all-databases }}
      uatemeaall-databases: ${{ steps.create-matrix.outputs.uatemeaall-databases }}
      uatnasaall-databases: ${{ steps.create-matrix.outputs.uatnasaall-databases }}
      uatapacall-databases: ${{ steps.create-matrix.outputs.uatapacall-databases }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create dynamic matrix from JSON config
        id: create-matrix
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.confirm_deployment }}" -eq "false") {
            Write-Error "Deployment confirmation required"
            exit 1
          }
          
          # Read JSON configuration
          $config = Get-Content -Path ".github/config/database-config.json" | ConvertFrom-Json
          $allEnvironments = $config.PSObject.Properties.Name
          
          Write-Host "Reading configuration from JSON file..."
          Write-Host "Environments found: $($allEnvironments -join ', ')"
          
          # Create environments array for approval matrix
          $environmentsJson = $allEnvironments | ConvertTo-Json -Compress
          echo "environments=$environmentsJson" >> $env:GITHUB_OUTPUT
          
          # Create approval matrix
          $approvalMatrix = @()
          foreach ($env in $allEnvironments) {
            $approvalMatrix += @{
              environment = $env
            }
          }
          $approvalMatrixJson = @{include = $approvalMatrix} | ConvertTo-Json -Compress
          echo "approval-matrix=$approvalMatrixJson" >> $env:GITHUB_OUTPUT
          
          # Create database matrices for each environment
          foreach ($env in $allEnvironments) {
            $databases = $config.$env.Database
            Write-Host "$env environment has databases: $($databases -join ', ')"
            
            # Create database matrix for this environment
            $databaseMatrix = @()
            foreach ($db in $databases) {
              $databaseMatrix += @{
                environment = $env
                database = $db
              }
            }
            $databaseMatrixJson = @{include = $databaseMatrix} | ConvertTo-Json -Compress
            $envLower = $env.ToLower()
            echo "$envLower-databases=$databaseMatrixJson" >> $env:GITHUB_OUTPUT
          }
          
          Write-Host "Matrix created successfully"
          Write-Host "Total environments: $($allEnvironments.Count)"

  # Dynamic environment approvals
  approve-environments:
    runs-on: windows-latest
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.approval-matrix) }}
      fail-fast: false
    environment: 
      name: ${{ matrix.environment }}-approval
    steps:
      - name: Approve ${{ matrix.environment }} Environment
        run: |
          echo "Approval granted for ${{ matrix.environment }} environment"
          echo "This approval covers all databases in ${{ matrix.environment }}"

  # DEV2 Database Deployments
  deploy-dev2-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'DEV2')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.dev2-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to DEV2
        run: |
          echo "Starting deployment of ${{ matrix.database }} to DEV2"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          # - uses: ./.github/actions/deploy-database
          #   with:
          #     database-name: ${{ matrix.database }}
          #     environment: ${{ matrix.environment }}
          #     connection-string: ${{ secrets[format('DEV2_{0}_CONNECTION_STRING', matrix.database)] }}
          echo "Deployment completed successfully"

  # DEV2ALL Database Deployments
  deploy-dev2all-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'DEV2ALL')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.dev2all-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to DEV2ALL
        run: |
          echo "Starting deployment of ${{ matrix.database }} to DEV2ALL"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          echo "Deployment completed successfully"

  # QA2ALL Database Deployments
  deploy-qa2all-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'QA2ALL')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.qa2all-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to QA2ALL
        run: |
          echo "Starting deployment of ${{ matrix.database }} to QA2ALL"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          echo "Deployment completed successfully"

  # UATEMEAALL Database Deployments
  deploy-uatemeaall-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'UATEMEAALL')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.uatemeaall-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to UATEMEAALL
        run: |
          echo "Starting deployment of ${{ matrix.database }} to UATEMEAALL"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          echo "Deployment completed successfully"

  # UATNASAALL Database Deployments
  deploy-uatnasaall-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'UATNASAALL')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.uatnasaall-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to UATNASAALL
        run: |
          echo "Starting deployment of ${{ matrix.database }} to UATNASAALL"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          echo "Deployment completed successfully"

  # UATAPACALL Database Deployments
  deploy-uatapacall-databases:
    runs-on: windows-latest
    needs: [setup, approve-environments]
    if: contains(fromJson(needs.setup.outputs.environments), 'UATAPACALL')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.uatapacall-databases) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy ${{ matrix.database }} to UATAPACALL
        run: |
          echo "Starting deployment of ${{ matrix.database }} to UATAPACALL"
          echo "Environment: ${{ matrix.environment }}"
          echo "Database: ${{ matrix.database }}"
          # Add your deployment steps here
          echo "Deployment completed successfully"

  # Final deployment summary
  deployment-summary:
    runs-on: windows-latest
    needs: [
      setup,
      deploy-dev2-databases,
      deploy-dev2all-databases,
      deploy-qa2all-databases,
      deploy-uatemeaall-databases,
      deploy-uatnasaall-databases,
      deploy-uatapacall-databases
    ]
    if: always()
    steps:
      - name: Overall Deployment Summary
        shell: powershell
        run: |
          Write-Host "============================================"
          Write-Host "DEPLOYMENT SUMMARY"
          Write-Host "============================================"
          Write-Host "All database deployment jobs completed"
          Write-Host "Check individual job results for details"
